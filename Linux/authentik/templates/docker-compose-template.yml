version: '3.4'

networks:
  proxy:
    external: true

services:
  postgresql:
    image: docker.io/library/postgres:12-alpine
    container_name: authentik_postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    networks:
      - TRAEFIKNETWORK
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?database password required}
      - POSTGRES_USER=${POSTGRES_USER:-authentik}
      - POSTGRES_DB=${POSTGRES_DB:-authentik}
    env_file:
      - .env


  redis:
    image: docker.io/library/redis:alpine
    container_name: authentik_redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - TRAEFIKNETWORK


  server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik_server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS_HOST: redis
      AUTHENTIK_POSTGRESQL_HOST: postgresql
      AUTHENTIK_POSTGRESQL_USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL_NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_ERROR_REPORTING_ENABLED: "false"
      # WORKERS: 2
    volumes:
      - media:/media
      - custom-templates:/templates
      - geoip:/geoip
    env_file:
      - .env
    ports:
      - "0.0.0.0:${AUTHENTIK_PORT_HTTP:-9000}:9000"
      - "0.0.0.0:${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    networks:
      - TRAEFIKNETWORK

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=TRAEFIKNETWORK"

      # Routers
      - "traefik.http.routers.authentik.entrypoints=http"
      - "traefik.http.routers.authentik.rule=Host(`$AUTHENTIK_HOST.$AUTHENTIK_DOMAIN`)"
      - "traefik.http.routers.authentik.middlewares=authentik-https-redirect"
      - "traefik.http.routers.authentik-secure.entrypoints=https"
      - "traefik.http.routers.authentik-secure.rule=Host(`$AUTHENTIK_HOST.$AUTHENTIK_DOMAIN`)"
      - "traefik.http.routers.authentik-secure.tls=true"
      - "traefik.http.routers.authentik-secure.tls.certresolver=le"
      - "traefik.http.routers.authentik-secure.service=authentik"

      ## Individual Application forwardAuth regex (catch any subdomain using individual application forwardAuth)  
      - "traefik.http.routers.authentik-outpost.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.$AUTHENTIK_DOMAIN`) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik-outpost.entrypoints=https"
      - "traefik.http.routers.authentik-outpost.tls=true"
      - "traefik.http.routers.authentik-outpost.tls.certresolver=le"

      #Service definition
      - "traefik.http.services.authentik.loadbalancer.server.port=${AUTHENTIK_PORT_HTTP}"

      #Middleware definitions
      - "traefik.http.middlewares.authentik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.authentik.forwardauth.address=http://$AUTHENTIK_HOST.$AUTHENTIK_DOMAIN:$AUTHENTIK_PORT_HTTP/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"

      # Watchtower
      #- "com.centurylinklabs.watchtower.enable=true"


  worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik_worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS_HOST: redis
      AUTHENTIK_POSTGRESQL_HOST: postgresql
      AUTHENTIK_POSTGRESQL_USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL_NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_ERROR_REPORTING_ENABLED: "false"
    # This is optional, and can be removed. If you remove this, the following will happen
    # - The permissions for the /media folders aren't fixed, so make sure they are 1000:1000
    # - The docker socket can't be accessed anymore
    user: root
    volumes:
      - media:/media
      - ./certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./custom-templates:/templates
      - geoip:/geoip
    env_file:
      - .env
    networks:
      - TRAEFIKNETWORK


  geoipupdate:
    image: "maxmindinc/geoipupdate:latest"
    container_name: authentik-goipupdate
    volumes:
      - "geoip:/usr/share/GeoIP"
    environment:
      GEOIPUPDATE_ACCOUNT_ID: "${GEOIPUPDATE_ACCOUNT_ID}"
      GEOIPUPDATE_LICENSE_KEY: "${GEOIPUPDATE_LICENSE_KEY}"
      GEOIPUPDATE_EDITION_IDS: "${GEOIPUPDATE_EDITION_IDS}"
      GEOIPUPDATE_FREQUENCY: "${GEOIPUPDATE_FREQUENCY}"
    env_file:
      - .env

volumes:
  database:
    driver: local
  redis:
    driver: local
  geoip:
    driver: local
  media:
    driver: local
  custom-templates:
    driver: local
